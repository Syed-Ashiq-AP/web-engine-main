import { Edge, Node } from "@xyflow/react";
import { compilers } from "./JS/nodeCompiler/compilers";

export const underCase = (string: string) =>
  string && string.replace(/([a-z])([A-Z])/g, "$1_$2").replace(/[\s_]+/g, "_");
type CompilerKeys = keyof typeof compilers;
export const Compile = (
  targetEdge: Edge,
  edges: Edge[],
  nodes: Node[]
): string[] => {
  const targetNode = nodes.find((node) => node.id === targetEdge.target);
  if (!targetNode) return [""];
  if (targetNode.type?.toLowerCase().includes("branch")) {
    return [
      compilers[targetNode.type as CompilerKeys](targetNode, nodes, edges),
    ];
  }
  const toEdge = edges.find(
    (edge: Edge) =>
      edge.source === targetNode.id &&
      edge.targetHandle &&
      edge.targetHandle === "in"
  );
  if (toEdge) {
    return [
      compilers[targetNode.type as CompilerKeys](targetNode, nodes, edges),
      ...Compile(toEdge, edges, nodes),
    ];
  }
  return [compilers[targetNode.type as CompilerKeys](targetNode, nodes, edges)];
};

export const TagNames = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "search",
  "section",
  "select",
  "slot",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
];

export const TagAttributes = [
  "id",
  "class",
  "style",
  "title",
  "type",
  "name",
  "value",
  "placeholder",
  "disabled",
  "checked",
  "src",
  "alt",
  "autoplay",
  "loop",
  "muted",
  "href",
  "target",
];

export const TagStyles = [
  "color",
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "lineHeight",
  "letterSpacing",
  "textAlign",
  "textDecoration",
  "textTransform",
  "whiteSpace",
  "wordSpacing",
  "width",
  "height",
  "maxWidth",
  "maxHeight",
  "minWidth",
  "minHeight",
  "margin",
  "padding",
  "border",
  "borderRadius",
  "boxSizing",
  "backgroundColor",
  "backgroundImage",
  "backgroundPosition",
  "backgroundSize",
  "backgroundRepeat",
  "backgroundAttachment",
  "position",
  "top",
  "right",
  "bottom",
  "left",
  "zIndex",
  "float",
  "clear",
  "display",
  "visibility",
  "overflow",
  "opacity",
  "flexDirection",
  "justifyContent",
  "alignItems",
  "alignSelf",
  "flexWrap",
  "gap",
  "gridTemplateColumns",
  "gridTemplateRows",
  "gridGap",
  "gridColumn",
  "gridRow",
  "placeItems",
  "transition",
  "transitionDuration",
  "transitionDelay",
  "transitionTimingFunction",
  "animation",
  "animationName",
  "animationDuration",
  "animationDelay",
  "objectFit",
  "objectPosition",
  "filter",
  "aspectRatio",
  "cursor",
  "pointerEvents",
  "userSelect",
  "boxShadow",
  "textShadow",
  "transform",
  "clipPath",
  "content",
];

export const EventListeners = [
  "click",
  "dblclick",
  "mousedown",
  "mouseup",
  "mousemove",
  "mouseover",
  "mouseout",
  "mouseenter",
  "mouseleave",
  "contextmenu",
  "keydown",
  "keypress",
  "keyup",
  "submit",
  "change",
  "input",
  "focus",
  "blur",
  "reset",
  "invalid",
  "copy",
  "cut",
  "paste",
  "drag",
  "dragstart",
  "dragend",
  "dragenter",
  "dragleave",
  "dragover",
  "drop",
  "touchstart",
  "touchmove",
  "touchend",
  "touchcancel",
  "pointerdown",
  "pointerup",
  "pointermove",
  "pointerenter",
  "pointerleave",
  "pointerover",
  "pointerout",
  "pointercancel",
  "play",
  "pause",
  "ended",
  "volumechange",
  "timeupdate",
  "durationchange",
  "loadedmetadata",
  "loadeddata",
  "canplay",
  "canplaythrough",
  "load",
  "unload",
  "resize",
  "scroll",
  "beforeunload",
  "hashchange",
  "popstate",
  "focusin",
  "focusout",
  "animationstart",
  "animationend",
  "animationiteration",
  "transitionstart",
  "transitionend",
  "transitionrun",
  "transitioncancel",
  "wheel",
  "error",
  "abort",
  "resize",
  "message",
  "storage",
  "visibilitychange",
];
